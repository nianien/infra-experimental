version: 0.2

env:
  shell: bash
  variables:
    MODULE_PATH: "test/demo-order-rpc"    # 构建上下文目录（默认当前目录）
    DOCKERFILE_PATH: "docker/Dockerfile" # 相对 MODULE_PATH 的 Dockerfile 路径
    SKIP_TESTS: "1"              # 1=跳过测试；0=执行测试
    BUILD_VERSION: ""            # 当 IMAGE_TAG_FORMAT=fixed 时使用
    CONTAINER_PORT: '8081'

phases:
  install:
    runtime-versions:
      java: corretto21   # Java 21 构建环境（仅在检测到 pom.xml 时使用）

  pre_build:
    commands:
      - |-
        set -euo pipefail
        echo "== Environment variables check =="
        echo "ECR_REPO_URI=${ECR_REPO_URI:-<empty>}"
        echo "IMAGE_TAG_FORMAT=${IMAGE_TAG_FORMAT:-commit8}"
        echo "MODULE_PATH=${MODULE_PATH:-.}"
        echo "DOCKERFILE_PATH=${DOCKERFILE_PATH:-Dockerfile}"
        echo "SKIP_TESTS=${SKIP_TESTS:-1}"
        echo "BUILD_VERSION=${BUILD_VERSION:-}"
        test -n "${ECR_REPO_URI:-}" || { echo "[FATAL] Missing ECR_REPO_URI (from pipeline.yaml)"; exit 1; }

        echo "== Login to ECR and ensure repository exists =="
        export AWS_REGION="${AWS_REGION:-${AWS_DEFAULT_REGION:-us-east-1}}"
        export REGISTRY_HOST="$(echo "$ECR_REPO_URI" | awk -F/ '{print $1}')"
        export REPO_NAME="$(echo "$ECR_REPO_URI" | awk -F/ '{print $2}')"
        aws ecr describe-repositories --repository-names "$REPO_NAME" --region "$AWS_REGION" >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name "$REPO_NAME" --region "$AWS_REGION" >/dev/null
        aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$REGISTRY_HOST"

        echo "== Generating image tag =="
        COMMIT8="$(echo "${CODEBUILD_RESOLVED_SOURCE_VERSION:-}" | cut -c1-8 || true)"
        case "${IMAGE_TAG_FORMAT:-commit8}" in
          commit8)   IMAGE_TAG="${COMMIT8:-latest}" ;;
          timestamp) IMAGE_TAG="$(date +%Y%m%d%H%M%S)" ;;
          fixed)     IMAGE_TAG="${BUILD_VERSION:-latest}" ;;
          latest|"") IMAGE_TAG="latest" ;;
          *)         IMAGE_TAG="${COMMIT8:-latest}" ;;
        esac
        echo "IMAGE_TAG=$IMAGE_TAG"

  build:
    commands:
      - |-
        echo "== Checking build directory and Dockerfile =="
        WORK_DIR="${MODULE_PATH:-.}"
        DF="${DOCKERFILE_PATH:-Dockerfile}"
        test -d "$WORK_DIR" || { echo "[FATAL] MODULE_PATH not found: $WORK_DIR"; exit 2; }
        test -f "$WORK_DIR/$DF" || { echo "[FATAL] Dockerfile not found: $WORK_DIR/$DF"; exit 3; }

        if [[ "$MODULE_PATH" == "." ]]; then
          mvn -B $( [[ "$SKIP_TESTS" == "1" ]] && echo -DskipTests ) clean package
        else
          mvn -B $( [[ "$SKIP_TESTS" == "1" ]] && echo -DskipTests ) -pl .,"$MODULE_PATH" -am clean package
        fi

        find "$WORK_DIR/target" -maxdepth 1 -type f -name "*.jar" \
          ! -name "*-sources.jar" ! -name "*-javadoc.jar" ! -name "*-tests.jar" \
          | head -n1 | grep -q . || { echo "[FATAL] No runnable jar found"; exit 4; }

        echo "== Docker build & push =="
        IMAGE_TAG_URI="$ECR_REPO_URI:$IMAGE_TAG"
        docker build --build-arg APP_PORT="$CONTAINER_PORT" -f "$WORK_DIR/$DF" -t "$IMAGE_TAG_URI" "$WORK_DIR"
        docker push "$IMAGE_TAG_URI"

        echo "== Syncing tag :latest =="
        LATEST_URI="$ECR_REPO_URI:latest"
        docker tag "$IMAGE_TAG_URI" "$LATEST_URI"
        docker push "$LATEST_URI"
  post_build:
    commands:
      - |-
        echo "== Output CloudFormation parameters file =="
        echo '{"Parameters":{"ImageUri":"'$IMAGE_TAG_URI'"}}' > cfn-params.json
        echo "Generated cfn-params.json: ImageUri=$IMAGE_TAG_URI"

artifacts:
  files:
    - cfn-params.json