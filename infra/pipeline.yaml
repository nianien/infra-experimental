AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodePipeline: per-service ECS deploy (GitHub via CodeStar, CodeBuild builds image, CFN deploys ECS stack)'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: "✅ 必填参数（必须提供）" }
        Parameters:
          - PipelineName
          - ServiceName
          - SdServiceId
          - RepoName
      - Label: { default: "🧩 选填参数（有默认值，可覆盖）" }
        Parameters:
          - ConnectionArn
          - ArtifactBucketName
          - CloudFormationDeployRoleArn
          - CodePipelineRoleArn
          - CodeBuildRoleArn
          - BranchName
          - TemplatePath
          - ImageTagFormat
          - EcrRepositoryUri
          - ClusterName
          - ExecutionRoleArn
          - TaskRoleArn
          - Subnets
          - SecurityGroups
          - AssignPublicIp
          - LaneName
          - ContainerPort
    ParameterLabels:
      PipelineName: { default: "Pipeline 名称" }
      ServiceName: { default: "服务名（ServiceBase）" }
      SdServiceId: { default: "Cloud Map Service ID" }
      RepoName: { default: "GitHub 仓库（org/repo）" }
      ConnectionArn: { default: "CodeStar Connections ARN" }
      ArtifactBucketName: { default: "存储Artifacts的 S3 桶" }
      LaneName: { default: "泳道环境标签" }
      ContainerPort: { default: "默认容器端口" }

Parameters:

  # =========================================================
  # ✅ 必填参数（无默认值，必须传入）
  # =========================================================

  # --- 服务基础信息 ---
  PipelineName:
    Type: String
    Description: 'Pipeline 名称（例如 deploy-<service>）'

  ServiceName:
    Type: String
    Description: '服务名（= ServiceBase，例如 demo-user-rpc）'

  SdServiceId:
    Type: String
    Description: 'Cloud Map Service ID（如 srv-xxxxxx）'

  RepoName:
    Type: String
    Description: 'GitHub 仓库全名（org/repo）'

  # =========================================================
  # 🧩 选填参数（有默认值，可覆盖）
  # =========================================================

  # --- 源码来源（GitHub via CodeStar Connections）---
  ConnectionArn:
    Type: String
    Default: 'arn:aws:codeconnections:us-east-1:297997107448:connection/9adfd918-2843-4147-9bc9-c4ee1a99bc39'
    Description: 'CodeStar Connections ARN（GitHub 连接）'

  ArtifactBucketName:
    Type: String
    Default: 'codepipeline-us-east-1-3622cd43956e-4d23-9284-a18746ff6c07'
    Description: '存放Pipeline Artifacts的S3桶名'

  # --- 固定角色 ---
  CloudFormationDeployRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/CloudFormationDeployRole'
    Description: 'CloudFormation 执行角色 ARN（由 CodePipeline 的 CFN Action 假设）'

  CodePipelineRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/CodePipelineRole'
    Description: 'CodePipeline Service Role ARN'

  CodeBuildRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/CodeBuildRole'
    Description: 'CodeBuild Service Role ARN'

  # --- 源码与模板 ---
  BranchName:
    Type: String
    Default: 'main'
    Description: 'Git 分支名（默认 main）'

  TemplatePath:
    Type: String
    Default: 'ci/ecs-service-deploy.yaml'
    Description: '仓库内的 ECS 部署模板路径（随源码打包）'

  # --- 镜像构建配置 ---
  ImageTagFormat:
    Type: String
    AllowedValues: [ 'commit8','timestamp','latest','fixed' ]
    Default: 'commit8'
    Description: "镜像 Tag 生成策略：commit8 / timestamp / latest / fixed；buildspec 将按此规则生成 tag"

  EcrRepositoryUri:
    Type: String
    Default: ''
    Description: "（可选）显式指定 ECR Repo URI；留空则按 <account>.dkr.ecr.<region>.amazonaws.com/<ServiceName> 推导"

  # --- ECS 网络与任务执行配置 ---
  ClusterName:
    Type: String
    Default: 'demo-cluster'
    Description: 'ECS 集群名称'

  ExecutionRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskExecutionRole'
    Description: 'ECS 任务执行角色（task execution role）'

  TaskRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskRole'
    Description: 'ECS 容器任务角色（task role）'

  Subnets:
    Type: String
    Default: 'subnet-02c0811a961e428b5,subnet-0d3bc6916292f848c'
    Description: 'ECS Service 使用的子网 ID 列表（逗号分隔）'

  SecurityGroups:
    Type: String
    Default: 'sg-00a34a14c1889ddfc'
    Description: 'ECS Service 安全组 ID 列表（逗号分隔）'

  AssignPublicIp:
    Type: String
    AllowedValues: [ 'ENABLED','DISABLED' ]
    Default: 'ENABLED'
    Description: '是否分配公有 IP（默认 ENABLED）'


  LaneName:
    Type: String
    Default: 'default'
    Description: 'Pipeline 指定服务泳道标签'

  ContainerPort:
    Type: Number
    Default: 8080
    Description: 'Pipeline 指定容器默认端口'

Conditions:
  UseProvidedRepo: !Not [ !Equals [ !Ref EcrRepositoryUri, '' ] ]

Resources:

  # ---------------- CodeBuild Project（使用固定Role）----------------
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${PipelineName}-build'
      ServiceRole: !Ref CodeBuildRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/standard:7.0'
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPO_URI
            Type: PLAINTEXT
            Value: !If
              - UseProvidedRepo
              - !Ref EcrRepositoryUri
              - !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}'
          - Name: IMAGE_TAG_FORMAT
            Type: PLAINTEXT
            Value: !Ref ImageTagFormat
      Source:
        Type: CODEPIPELINE
        BuildSpec: 'ci/buildspec.yaml'
      TimeoutInMinutes: 60

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !Ref CodePipelineRoleArn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName

      Variables:
        - Name: LANE
          DefaultValue: !Ref LaneName
        - Name: DESIRED_COUNT
          DefaultValue: '0'
        - Name: CONTAINER_PORT
          DefaultValue: !Ref ContainerPort

      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Ref RepoName
                BranchName: !Ref BranchName
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceOut

        - Name: Build
          Actions:
            - Name: DockerBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOut
              OutputArtifacts:
                - Name: BuildOut

        - Name: Deploy
          Actions:
            - Name: CFNDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOut
                - Name: BuildOut
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub '${ServiceName}-#{variables.LANE}'
                TemplatePath: !Sub 'SourceOut::${TemplatePath}'
                TemplateConfiguration: 'BuildOut::cfn-params.json'
                RoleArn: !Ref CloudFormationDeployRoleArn
                Capabilities: 'CAPABILITY_IAM,CAPABILITY_NAMED_IAM'
                ParameterOverrides:
                  !Sub
                  - |
                    {
                      "ServiceBase": "${ServiceName}",
                      "Lane": "#{variables.LANE}",
                      "ClusterName": "${ClusterName}",
                      "ExecutionRoleArn": "${ExecutionRoleArn}",
                      "TaskRoleArn": "${TaskRoleArn}",
                      "Subnets": "${Subnets}",
                      "SecurityGroups": "${SecurityGroups}",
                      "AssignPublicIp": "${AssignPublicIp}",
                      "ContainerPort": "#{variables.CONTAINER_PORT}",
                      "DesiredCount": "#{variables.DESIRED_COUNT}",
                      "SdRegistryArn": "${SdArnResolved}"
                    }
                  - { SdArnResolved: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/${SdServiceId}' }

      RestartExecutionOnUpdate: true

Outputs:
  PipelineNameOut:
    Value: !Ref PipelineName
  CodeBuildProjectOut:
    Value: !Ref CodeBuildProject