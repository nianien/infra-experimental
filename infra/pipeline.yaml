AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodePipeline: per-service ECS deploy (GitHub via CodeStar, CodeBuild builds image, CFN deploys ECS stack)'

Parameters:
  # ---------------- Pipeline.sh 创建时传入 ----------------
  ArtifactBucketName:     # 🔵 共享 S3 桶（Pipeline.sh 传入）
    Type: String
    Description: '已存在的 S3 桶名（Pipeline Artifacts 存放处）'

  PipelineName:           # 🔵 由 pipeline.sh 根据 --service 自动生成，如 deploy-demo-user-rpc
    Type: String

  CFNDeployRoleArn:       # 🔵 CloudFormation 部署角色（由 pipeline.sh 传入）
    Type: String

  ConnectionArn:          # 🔵 CodeStar Connection ARN（由 pipeline.sh 传入）
    Type: String

  FullRepo:               # 🔵 GitHub 仓库（org/repo）（由 pipeline.sh 传入）
    Type: String

  BranchName:             # 🔵 仓库分支（由 pipeline.sh 传入）
    Type: String
    Default: 'main'

  ServiceName:            # 🔵 服务名（由 pipeline.sh 传入，如 demo-user-rpc）
    Type: String

  SdServiceId:            # 🔵 Cloud Map Service ID（由 pipeline.sh 传入，如 srv-xxxxxx）
    Type: String

  TemplatePath:           # 🔵 ECS CFN 模板路径（在源码仓库内，如 ci/ecs-service-deploy.yaml）
    Type: String
    Default: 'ci/ecs-service-deploy.yaml'

  # ---------------- 可选参数，由模板内部自动派生 ----------------
  EcrRepositoryUri:       # 🟢 可选。如果未传，模板会自动拼出 ECR repo（按 ServiceName）
    Type: String
    Default: ""

  ImageTagFormat:         # 🔵 或由 pipeline.sh 传入（默认 commit8）
    Type: String
    AllowedValues: ['commit8','timestamp','latest']
    Default: 'commit8'

  # ---------------- 全局默认参数（共用基础配置） ----------------
  ClusterName:            # 🟡 ECS Cluster 名称（默认即可）
    Type: String
    Default: 'demo-cluster'
  ExecutionRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskExecutionRole'
  TaskRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskRole'
  Subnets:
    Type: String
    Default: 'subnet-02c0811a961e428b5,subnet-0d3bc6916292f848c'
  SecurityGroups:
    Type: String
    Default: 'sg-00a34a14c1889ddfc'
  AssignPublicIp:
    Type: String
    AllowedValues: ['ENABLED','DISABLED']
    Default: 'ENABLED'
  LogStreamPrefix:
    Type: String
    Default: 'ecs'

Conditions:
  UseProvidedRepo: !Not [ !Equals [ !Ref EcrRepositoryUri, "" ] ]

# ---------------------------------------------------------------------------
# Resources
# ---------------------------------------------------------------------------
Resources:
  # ================= IAM: CodePipeline Role =================
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codepipeline.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'pipeline-inline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3Artifacts
                Effect: Allow
                Action: [ s3:GetObject, s3:GetObjectVersion, s3:PutObject, s3:ListBucket ]
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Sid: CodeStarConn
                Effect: Allow
                Action: [ codestar-connections:UseConnection ]
                Resource: !Ref ConnectionArn
              - Sid: CodeBuildStart
                Effect: Allow
                Action: [ codebuild:BatchGetBuilds, codebuild:StartBuild ]
                Resource: '*'
              - Sid: CloudFormationCtl
                Effect: Allow
                Action:
                  - cloudformation:*
                Resource: '*'
              - Sid: AssumeCFNDeployRole
                Effect: Allow
                Action: sts:AssumeRole
                Resource: !Ref CFNDeployRoleArn
              - Sid: PassTaskRoles
                Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !Ref ExecutionRoleArn
                  - !Ref TaskRoleArn

  # ================= IAM: CodeBuild Role =================
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-build-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'codebuild-inline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Logs
                Effect: Allow
                Action: [ logs:* ]
                Resource: '*'
              - Sid: S3Artifacts
                Effect: Allow
                Action: [ s3:* ]
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Sid: ECRReadWrite
                Effect: Allow
                Action: [ ecr:* ]
                Resource: '*'

  # ================= CodeBuild Project =================
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${PipelineName}-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/standard:7.0'
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          # 🔴 下发给 buildspec.yaml 的变量（由 pipeline.yaml 控制）
          - Name: ECR_REPO_URI
            Type: PLAINTEXT
            Value: !If
              - UseProvidedRepo
              - !Ref EcrRepositoryUri
              - !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}'
          - Name: IMAGE_TAG_FORMAT
            Type: PLAINTEXT
            Value: !Ref ImageTagFormat
      Source:
        Type: CODEPIPELINE
        BuildSpec: 'ci/buildspec.yaml'
      TimeoutInMinutes: 60

  # ================= CodePipeline =================
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName

      Variables:   # ✅ pipeline-level 运行时变量，可在 start-pipeline-execution 中覆盖
        - Name: LANE
          DefaultValue: 'default'
        - Name: DESIRED
          DefaultValue: '1'
        - Name: CONT_PORT
          DefaultValue: '8080'

      Stages:
        # -------- Source --------
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Ref FullRepo
                BranchName: !Ref BranchName
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceOut

        # -------- Build --------
        - Name: Build
          Actions:
            - Name: DockerBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOut
              OutputArtifacts:
                - Name: BuildOut

        # -------- Deploy --------
        - Name: Deploy
          Actions:
            - Name: CFNDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOut
                - Name: BuildOut
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub '${ServiceName}-#{variables.LANE}'
                TemplatePath: !Sub 'SourceOut::${TemplatePath}'
                TemplateConfiguration: 'BuildOut::cfn-params.json'
                RoleArn: !Ref CFNDeployRoleArn
                Capabilities: 'CAPABILITY_IAM,CAPABILITY_NAMED_IAM'
                ParameterOverrides:
                  !Sub
                  - |
                    {
                      "ServiceBase": "${ServiceName}",
                      "Lane": "#{variables.LANE}",
                      "ClusterName": "${ClusterName}",
                      "ExecutionRoleArn": "${ExecutionRoleArn}",
                      "TaskRoleArn": "${TaskRoleArn}",
                      "Subnets": "${Subnets}",
                      "SecurityGroups": "${SecurityGroups}",
                      "AssignPublicIp": "${AssignPublicIp}",
                      "LogStreamPrefix": "${LogStreamPrefix}",
                      "ContainerPort": "#{variables.CONT_PORT}",
                      "DesiredCount": "#{variables.DESIRED}",
                      "SdRegistryArn": "${SdArnResolved}"
                    }
                  - { SdArnResolved: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/${SdServiceId}' }

      RestartExecutionOnUpdate: true

Outputs:
  PipelineNameOut:
    Value: !Ref PipelineName
  CodeBuildProjectOut:
    Value: !Ref CodeBuildProject