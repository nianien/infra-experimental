AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodePipeline: per-service ECS deploy (GitHub via CodeStar, CodeBuild builds image, CFN deploys ECS stack)'

Parameters:
  ArtifactBucketName:
    Type: String
    Description: '已存在的 S3 桶名（Pipeline Artifacts 存放处）'
  PipelineName:
    Type: String
    Description: 'Pipeline 名称（例如 deploy-<service>）'
  CFNDeployRoleArn:
    Type: String
    Description: 'CloudFormation 执行角色 ARN（被 Pipeline 假设）'

  # GitHub via CodeStar Connections
  ConnectionArn:
    Type: String
    Description: 'CodeStar Connections ARN'
  FullRepo:
    Type: String
    Description: 'GitHub 仓库（org/repo）'
  BranchName:
    Type: String
    Default: 'main'

  # 服务参数（与创建脚本保持一致）
  ServiceName:
    Type: String
    Description: '服务名（= ServiceBase，例如 demo-user-rpc）'
  SdServiceId:
    Type: String
    Description: 'Cloud Map Service ID（如 srv-xxxxxx）'

  # 源码中的 ECS 模板路径
  TemplatePath:
    Type: String
    Default: 'ci/ecs-service-deploy.yaml'

  # 可选 ECR Repo URI
  EcrRepositoryUri:
    Type: String
    Default: ""

  ImageTagFormat:
    Type: String
    AllowedValues: ['commit7','timestamp','latest']
    Default: 'commit7'

  # ==== 全局默认参数 ====
  ClusterName:
    Type: String
    Default: 'demo-cluster'
  ExecutionRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskExecutionRole'
  TaskRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskRole'
  Subnets:
    Type: String
    Default: 'subnet-02c0811a961e428b5,subnet-0d3bc6916292f848c'
  SecurityGroups:
    Type: String
    Default: 'sg-00a34a14c1889ddfc'
  AssignPublicIp:
    Type: String
    AllowedValues: ['ENABLED','DISABLED']
    Default: 'ENABLED'
  LogStreamPrefix:
    Type: String
    Default: 'ecs'

Conditions:
  UseProvidedRepo: !Not [ !Equals [ !Ref EcrRepositoryUri, "" ] ]

Resources:
  # ---------------- CodePipeline Role ----------------
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codepipeline.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'pipeline-inline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3Artifacts
                Effect: Allow
                Action: [ s3:GetObject, s3:GetObjectVersion, s3:PutObject, s3:ListBucket ]
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Sid: CodeStarConn
                Effect: Allow
                Action: [ codestar-connections:UseConnection ]
                Resource: !Ref ConnectionArn
              - Sid: CodeBuildStart
                Effect: Allow
                Action: [ codebuild:BatchGetBuilds, codebuild:StartBuild ]
                Resource: '*'
              - Sid: CloudFormationCtl
                Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:Describe*
                  - cloudformation:GetTemplate*
                Resource: '*'
              - Sid: AssumeCFNDeployRole
                Effect: Allow
                Action: sts:AssumeRole
                Resource: !Ref CFNDeployRoleArn
              - Sid: PassTaskRoles
                Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !Ref ExecutionRoleArn
                  - !Ref TaskRoleArn

  # ---------------- CodeBuild Role ----------------
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-build-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'codebuild-inline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Logs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'
              - Sid: S3Artifacts
                Effect: Allow
                Action: [ s3:GetObject, s3:PutObject, s3:GetObjectVersion, s3:GetBucketLocation, s3:List* ]
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Sid: ECRReadWrite
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:DescribeRepositories
                  - ecr:DescribeImages
                  - ecr:CreateRepository
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: '*'

  # ---------------- CodeBuild Project ----------------
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${PipelineName}-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/standard:7.0'
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPO_URI
            Type: PLAINTEXT
            Value: !If
              - UseProvidedRepo
              - !Ref EcrRepositoryUri
              - !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}'
          - Name: IMAGE_TAG_FORMAT
            Type: PLAINTEXT
            Value: !Ref ImageTagFormat
      Source:
        Type: CODEPIPELINE
        BuildSpec: 'ci/buildspec.yaml'
      TimeoutInMinutes: 60

  # ---------------- Pipeline ----------------
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName

      Variables:
        - Name: LANE
          DefaultValue: 'default'
        - Name: DESIRED
          DefaultValue: '1'
        - Name: CONT_PORT
          DefaultValue: '8080'

      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Ref FullRepo
                BranchName: !Ref BranchName
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceOut

        - Name: Build
          Actions:
            - Name: DockerBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOut
              OutputArtifacts:
                - Name: BuildOut

        - Name: Deploy
          Actions:
            - Name: CFNDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOut
                - Name: BuildOut
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub '${ServiceName}-#{variables.LANE}'
                TemplatePath: !Sub 'SourceOut::${TemplatePath}'
                TemplateConfiguration: 'BuildOut::cfn-params.json'
                RoleArn: !Ref CFNDeployRoleArn
                Capabilities: 'CAPABILITY_IAM,CAPABILITY_NAMED_IAM'
                ParameterOverrides:
                  !Sub
                  - |
                    {
                      "ServiceBase": "${ServiceName}",
                      "Lane": "#{variables.LANE}",
                      "ClusterName": "${ClusterName}",
                      "ExecutionRoleArn": "${ExecutionRoleArn}",
                      "TaskRoleArn": "${TaskRoleArn}",
                      "Subnets": "${Subnets}",
                      "SecurityGroups": "${SecurityGroups}",
                      "AssignPublicIp": "${AssignPublicIp}",
                      "LogStreamPrefix": "${LogStreamPrefix}",
                      "ContainerPort": "#{variables.CONT_PORT}",
                      "DesiredCount": "#{variables.DESIRED}",
                      "SdRegistryArn": "${SdArnResolved}"
                    }
                  - { SdArnResolved: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/${SdServiceId}' }

      RestartExecutionOnUpdate: true

Outputs:
  PipelineNameOut:
    Value: !Ref PipelineName
  CodeBuildProjectOut:
    Value: !Ref CodeBuildProject