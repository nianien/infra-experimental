AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodePipeline (by-lane): Source -> CodeBuild (maven + docker) -> CloudFormation deploy to ECS. ImageUri from CodeBuild; Cloud Map uses SdServiceId (srv-xxxx) -> ARN.'

Parameters:
  ArtifactBucketName:
    Type: String
    Description: 'Existing S3 bucket for CodePipeline artifacts'
  ConnectionArn:
    Type: String
    Description: 'CodeStar Connections ARN for GitHub'
  FullRepo:
    Type: String
    Description: 'GitHub repository in owner/repo format'
  BranchName:
    Type: String
    Default: 'main'
  PipelineName:
    Type: String
    Default: 'ecs-by-lane-deploy'

  ServiceName:
    Type: String
    Description: 'Service name bound to this pipeline (e.g., demo-user-rpc)'
  SdServiceId:
    Type: String
    Description: 'Cloud Map Service ID (e.g., srv-abc123)'

  CFNDeployRoleArn:
    Type: String
    Description: 'CloudFormation execution role ARN (assumed by CFN Action)'

  ClusterName:
    Type: String
    Default: 'demo-cluster'
  ExecutionRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskExecutionRole'
  TaskRoleArn:
    Type: String
    Default: 'arn:aws:iam::297997107448:role/ecsTaskRole'
  Subnets:
    Type: String
    Default: 'subnet-02c0811a961e428b5,subnet-0d3bc6916292f848c'
  SecurityGroups:
    Type: String
    Default: 'sg-00a34a14c1889ddfc'
  AssignPublicIp:
    Type: String
    AllowedValues: [ENABLED, DISABLED]
    Default: ENABLED
  LogStreamPrefix:
    Type: String
    Default: 'ecs'

  TemplatePath:
    Type: String
    Default: 'pipeline/ecs-by-lane.yaml'

  ImageTagFormat:
    Type: String
    Default: 'commit7'  # commit7 | timestamp | latest
  CodeBuildComputeType:
    Type: String
    Default: 'BUILD_GENERAL1_SMALL'
  CodeBuildImage:
    Type: String
    Default: 'aws/codebuild/standard:7.0'

Resources:
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codepipeline.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'pipeline-inline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3Artifacts
                Effect: Allow
                Action: [s3:GetObject, s3:GetObjectVersion, s3:PutObject, s3:ListBucket]
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Sid: UseConnection
                Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: !Ref ConnectionArn
              - Sid: StartCodeBuild
                Effect: Allow
                Action: [codebuild:StartBuild, codebuild:BatchGetBuilds]
                Resource: '*'
              - Sid: CloudFormationCtl
                Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:Describe*
                  - cloudformation:List*
                Resource: '*'
              - Sid: AssumeCFNDeployRole
                Effect: Allow
                Action: sts:AssumeRole
                Resource: !Ref CFNDeployRoleArn
              - Sid: PassTaskRoles
                Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !Ref ExecutionRoleArn
                  - !Ref TaskRoleArn

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-codebuild-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 'codebuild-inline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Logs
                Effect: Allow
                Action: [logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents]
                Resource: '*'
              - Sid: S3Artifacts
                Effect: Allow
                Action: [s3:GetObject, s3:GetObjectVersion, s3:PutObject, s3:ListBucket]
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Sid: ECRPushPull
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeRepositories
                  - ecr:DescribeImages
                  - ecr:CreateRepository
                Resource: '*'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${PipelineName}-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts: { Type: CODEPIPELINE }
      Environment:
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildImage
        ComputeType: !Ref CodeBuildComputeType
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPO_URI
            Type: PLAINTEXT
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}'
          - Name: IMAGE_TAG_FORMAT
            Type: PLAINTEXT
            Value: !Ref ImageTagFormat
      Source:
        Type: CODEPIPELINE
        # 重要：不要用 !Sub；并把 ${VAR} 换成 $VAR，避免 CFN 误替换
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - aws --version
                - echo "Ensuring ECR repo exists: $ECR_REPO_URI"
                - |
                  REPONAME=$(echo $ECR_REPO_URI | awk -F/ '{print $2}')
                  aws ecr describe-repositories --repository-names "$REPONAME" >/dev/null 2>&1 || \
                    aws ecr create-repository --repository-name "$REPONAME" >/dev/null
                - echo "Logging in to Amazon ECR..."
                - aws ecr get-login-password | docker login --username AWS --password-stdin $(echo $ECR_REPO_URI | awk -F/ '{print $1}')
                - |
                  if [ "$IMAGE_TAG_FORMAT" = "commit7" ]; then
                    IMAGE_TAG=$(echo "$CODEBUILD_RESOLVED_SOURCE_VERSION" | cut -c 1-7)
                  elif [ "$IMAGE_TAG_FORMAT" = "timestamp" ]; then
                    IMAGE_TAG=$(date +%Y%m%d%H%M%S)
                  else
                    IMAGE_TAG="latest"
                  fi
                - echo "Using tag: $IMAGE_TAG"
            build:
              commands:
                - echo "==== BUILD JAVA ARTIFACT (Maven) ===="
                - mvn -B -q -DskipTests clean package
                - echo "==== BUILD DOCKER IMAGE ===="
                - docker build -t $ECR_REPO_URI:$IMAGE_TAG .
                - docker push $ECR_REPO_URI:$IMAGE_TAG
            post_build:
              commands:
                - IMAGE_URI="$ECR_REPO_URI:$IMAGE_TAG"
                - echo "{\"Parameters\":{\"ImageUri\":\"$IMAGE_URI\"}}" > cfn-params.json
                - cat cfn-params.json
          artifacts:
            files:
              - cfn-params.json

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName

      Variables:
        - Name: LANE
          DefaultValue: 'default'
        - Name: DESIRED
          DefaultValue: '1'
        - Name: CONT_PORT
          DefaultValue: '8080'

      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Ref FullRepo
                BranchName: !Ref BranchName
                OutputArtifactFormat: CODE_ZIP
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceOut
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: BuildAndPushImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOut
              OutputArtifacts:
                - Name: BuildOut
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: CFNDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOut
                - Name: BuildOut
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub '${ServiceName}-#{variables.LANE}'
                TemplatePath: !Sub 'SourceOut::${TemplatePath}'
                TemplateConfiguration: 'BuildOut::cfn-params.json'
                RoleArn: !Ref CFNDeployRoleArn
                Capabilities: 'CAPABILITY_IAM,CAPABILITY_NAMED_IAM'
                ParameterOverrides:
                  !Sub
                  - |
                    {
                      "ServiceBase": "${ServiceName}",
                      "Lane": "#{variables.LANE}",
                      "ClusterName": "${ClusterName}",
                      "ExecutionRoleArn": "${ExecutionRoleArn}",
                      "TaskRoleArn": "${TaskRoleArn}",
                      "Subnets": "${Subnets}",
                      "SecurityGroups": "${SecurityGroups}",
                      "AssignPublicIp": "${AssignPublicIp}",
                      "LogStreamPrefix": "${LogStreamPrefix}",
                      "SdRegistryArn": "${SdArnResolved}",
                      "ContainerPort": "#{variables.CONT_PORT}",
                      "DesiredCount": "#{variables.DESIRED}"
                    }
                  - { SdArnResolved: !Sub 'arn:aws:servicediscovery:${AWS::Region}:${AWS::AccountId}:service/${SdServiceId}' }
              RunOrder: 1

      RestartExecutionOnUpdate: true